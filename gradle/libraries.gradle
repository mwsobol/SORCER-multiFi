/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Build a map of the dependency artifacts to use.  Allows centralized definition of the version of artifacts to
 * use.  In that respect it serves a role similar to <dependencyManagement> in Maven
 */
ext {
	sorcerVersion = version

	groovyVersion = "2.4.19"
    rioVersion = "5.14.2"
	riverVersion = "2.2.2"
	slf4jVersion = "1.7.25"
	blitzVersion = "2.1.7"
	lockmgrVersion = "2.1.7"
	jeVersion = "5.0.104"
    //jeVersion = "18.3.12"
	junitVersion = "4.12"
	junitAddonsVersion = "1.4"
	antVersion = "1.8.2"
    plexusVersion = "3.3.0"
    jansiVersion = "1.11"
    commonsIoVersion = "2.4"
    commonsExecVersion = "1.3"
    guavaVersion = "25.0-jre"
    //guavaVersion = "16.0.1"
    logbackVersion = "1.2.3"
    jffpVersion = "1.2"
    jfreechartVersion = "1.0.14"
    jepVersion = "2.4.1a"
    jcommonVersion = "1.0.17"

    sorcerDistHome = "${rootProject.projectDir.path}/distribution/build/sorcer-$version"
    rioHome = "$sorcerDistHome/rio-${rioVersion}"

    /* ========================================================
     * Load configs/sorcer.env to get webster port and address.
     * First check if we have a distribution, if we do, load the
     * sorcer.env from the distribution
     * ======================================================== */
    def sorcerEnvProps = new Properties()
    File sorcerEnvFile = file("${sorcerDistHome}/configs/sorcer.env")
    if(!sorcerEnvFile.exists())
        sorcerEnvFile = file("configs/sorcer.env")
    sorcerEnvFile.withReader { reader ->
        sorcerEnvProps.load(reader)
    }
    def sorcerEnvParsed = new ConfigSlurper().parse(sorcerEnvProps)
    sorcerEnv = sorcerEnvParsed

    websterPort = sorcerEnv.provider.webster.port
    websterAddress = firstNonLoopbackAddress()

    useHttps = {
        def set = System.getProperties().stringPropertyNames()
        "https" in set
    }

    if (useHttps()) {
        websterUrl = "https://${websterAddress}:${websterPort}"
    } else {
        websterUrl = "http://${websterAddress}:${websterPort}"
    }

    println "Webster URL: ${websterUrl}"

    startClassPath = files("${rioHome}/lib/groovy-all-${groovyVersion}.jar",
                             "${rioHome}/lib/logging/slf4j-api-${slf4jVersion}.jar",
                             "${rioHome}/lib/logging/jul-to-slf4j-${slf4jVersion}.jar",
                             "${rioHome}/lib/logging/logback-core-${logbackVersion}.jar",
                             "${rioHome}/lib/logging/logback-classic-${logbackVersion}.jar",
                             "${sorcerDistHome}/lib/sorcer/lib/sorcer-resolving-loader-${sorcerVersion}.jar",
                             "${sorcerDistHome}/lib/common/guava-${guavaVersion}.jar",
                             "${rioHome}/lib/rio-platform-${rioVersion}.jar",
                             "${rioHome}/lib/start-${riverVersion}.jar",
                             "${rioHome}/lib/jsk-platform-${riverVersion}.jar"
                             )

    bootClassPath = files(startClassPath, "${sorcerDistHome}/lib/sorcer/lib/sorcer-boot-${version}.jar")

    libs = [
            junit : ["junit:junit:${junitVersion}", "junit-addons:junit-addons:${junitAddonsVersion}"],
            slf4j : ["org.slf4j:slf4j-api:${slf4jVersion}"],
            logback : ["ch.qos.logback:logback-classic:${logbackVersion}"]
    ]
}

static def firstNonLoopbackAddress() {
    Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();
    while (en.hasMoreElements()) {
        NetworkInterface i = en.nextElement();
        for (Enumeration<InetAddress> en2 = i.getInetAddresses(); en2.hasMoreElements();) {
            InetAddress address = en2.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address instanceof Inet4Address) {
                    return address.hostAddress
                }
            }
        }
    }
    "127.0.0.1"
}